let unix_timestamp = 1549312452;
// Create a new JavaScript Date object based on the timestamp
// multiplied by 1000 so that the argument is in milliseconds, not seconds.
var date = new Date(unix_timestamp * 1000);
// Hours part from the timestamp
var hours = date.getHours();
// Minutes part from the timestamp
var minutes = "0" + date.getMinutes();
// Seconds part from the timestamp
var seconds = "0" + date.getSeconds();

// Will display time in 10:30:23 format
var formattedTime = hours + ":" + minutes.substr(-2) + ":" + seconds.substr(-2);

const rawAverageHousePrice = [
  [-220903200000, 19300],
  [-213127200000, 19400],
  [-205268400000, 19200],
  [-197319600000, 19600],
  [-189367200000, 19600],
  [-181504800000, 20200],
  [-173646000000, 20500],
  [-165697200000, 20900],
  [-157744800000, 21500],
  [-149968800000, 21000],
  [-142110000000, 21600],
  [-134161200000, 21700],
  [-126208800000, 22700],
  [-118432800000, 23200],
  [-110574000000, 23000],
  [-102625200000, 22800],
  [-94672800000, 24000],
  [-86896800000, 24200],
  [-79038000000, 23900],
  [-71089200000, 24400],
  [-63136800000, 25400],
  [-55274400000, 26700],
  [-47415600000, 26600],
  [-39466800000, 27000],
  [-31514400000, 27600],
  [-23738400000, 28100],
  [-15879600000, 28100],
  [-7930800000, 27100],
  [21600000, 27000],
  [7797600000, 27300],
  [15656400000, 26000],
  [23605200000, 26300],
  [31557600000, 27300],
  [39333600000, 28600],
  [47192400000, 28300],
  [55141200000, 28200],
  [63093600000, 29000],
  [70956000000, 29400],
  [78814800000, 30300],
  [86763600000, 31600],
  [94716000000, 32800],
  [102492000000, 35100],
  [110350800000, 35900],
  [118299600000, 36600],
  [126252000000, 38000],
  [134024400000, 38600],
  [141886800000, 39000],
  [149835600000, 39300],
  [157788000000, 40900],
  [165560400000, 42600],
  [173422800000, 42200],
  [181371600000, 44400],
  [189324000000, 46000],
  [197186400000, 47800],
  [205045200000, 48100],
  [212994000000, 50300],
  [220946400000, 51600],
  [228722400000, 54300],
  [236581200000, 54000],
  [244530000000, 57500],
  [252482400000, 59300],
  [260258400000, 61600],
  [268117200000, 63500],
  [276066000000, 66400],
  [284018400000, 68300],
  [291794400000, 72400],
  [299653200000, 74200],
  [307602000000, 72700],
  [315554400000, 73600],
  [323416800000, 74400],
  [331275600000, 77500],
  [339224400000, 80000],
  [347176800000, 80900],
  [354952800000, 84300],
  [362811600000, 83800],
  [370760400000, 83700],
  [378712800000, 81200],
  [386488800000, 85700],
  [394347600000, 83900],
  [402296400000, 84600],
  [410248800000, 86700],
  [418024800000, 89100],
  [425883600000, 92500],
  [433832400000, 90800],
  [441784800000, 94700],
  [449647200000, 99200],
  [457506000000, 98500],
  [465454800000, 97800],
  [473407200000, 98500],
  [481183200000, 100500],
  [489042000000, 100500],
  [496990800000, 103800],
  [504943200000, 106300],
  [512719200000, 112000],
  [520578000000, 114400],
  [528526800000, 115600],
  [536479200000, 120800],
  [544255200000, 126100],
  [552114000000, 129900],
  [560062800000, 133500],
  [568015200000, 137900],
  [575877600000, 134800],
  [583736400000, 141500],
  [591685200000, 140400],
  [599637600000, 144300],
  [607413600000, 146800],
  [615272400000, 150200],
  [623221200000, 151200],
  [631173600000, 149500],
  [638949600000, 151200],
  [646808400000, 145500],
  [654757200000, 150100],
  [662709600000, 151100],
  [670485600000, 148200],
  [678344400000, 145400],
  [686293200000, 144400],
  [694245600000, 144500],
  [702108000000, 145300],
  [709966800000, 141700],
  [717915600000, 147200],
  [725868000000, 144700],
  [733644000000, 148900],
  [741502800000, 148000],
  [749451600000, 148300],
  [757404000000, 153600],
  [765180000000, 154200],
  [773038800000, 152800],
  [780987600000, 156100],
  [788940000000, 153500],
  [796716000000, 158900],
  [804574800000, 157700],
  [812523600000, 160900],
  [820476000000, 161100],
  [828338400000, 166000],
  [836197200000, 164000],
  [844146000000, 171000],
  [852098400000, 172200],
  [859874400000, 177200],
  [867733200000, 174700],
  [875682000000, 175400],
  [883634400000, 180000],
  [891410400000, 178800],
  [899269200000, 184300],
  [907218000000, 181500],
  [915170400000, 189100],
  [922946400000, 191800],
  [930805200000, 193000],
  [938754000000, 204800],
  [946706400000, 202900],
  [954568800000, 202400],
  [962427600000, 204100],
  [970376400000, 212100],
  [978328800000, 211000],
  [986104800000, 211200],
  [993963600000, 207800],
  [1001912400000, 214200],
  [1009864800000, 227600],
  [1017640800000, 227600],
  [1025499600000, 219100],
  [1033448400000, 232500],
  [1041400800000, 233100],
  [1049176800000, 241000],
  [1057035600000, 248100],
  [1064984400000, 256000],
  [1072936800000, 262900],
  [1080799200000, 265300],
  [1088658000000, 274000],
  [1096606800000, 286300],
  [1104559200000, 288500],
  [1112335200000, 287800],
  [1120194000000, 294600],
  [1128142800000, 294200],
  [1136095200000, 305300],
  [1143871200000, 302600],
  [1151730000000, 308100],
  [1159678800000, 299600],
  [1167631200000, 322100],
  [1175403600000, 310100],
  [1183266000000, 301200],
  [1191214800000, 305800],
  [1199167200000, 290400],
  [1207026000000, 304200],
  [1214888400000, 285100],
  [1222837200000, 276600],
  [1230789600000, 257000],
  [1238562000000, 273400],
  [1246424400000, 274100],
  [1254373200000, 272900],
  [1262325600000, 275300],
  [1270098000000, 268800],
  [1277960400000, 266000],
  [1285909200000, 278000],
  [1293861600000, 268100],
  [1301634000000, 267600],
  [1309496400000, 263000],
  [1317445200000, 259700],
  [1325397600000, 278000],
  [1333256400000, 282700],
  [1341118800000, 294500],
  [1349067600000, 297700],
  [1357020000000, 307400],
  [1364792400000, 320400],
  [1372654800000, 324400],
  [1380603600000, 334400],
  [1388556000000, 331400],
  [1396328400000, 340600],
  [1404190800000, 340400],
  [1412139600000, 369400],
  [1420092000000, 348000],
  [1427864400000, 339700],
  [1435726800000, 347400],
  [1443675600000, 366700],
  [1451628000000, 357000],
  [1459486800000, 357900],
  [1467349200000, 358800],
  [1475298000000, 364900],
  [1483250400000, 374800],
  [1491022800000, 376900],
  [1498885200000, 373200],
  [1506834000000, 399700],
  [1514786400000, 374600],
  [1522558800000, 378400],
  [1530421200000, 392900],
  [1538370000000, 384000],
  [1546322400000, 375500],
  [1554094800000, 376700],
  [1561957200000, 382700],
  [1569906000000, 384600],
  [1577858400000, 383000],
  [1585717200000, 374500],
  [1593579600000, 397800],
  [1601528400000, 403900],
  [1609480800000, 418600],
  [1617253200000, 440600],
  [1625115600000, 473000],
  [1633064400000, 497300],
  [1641016800000, 514100],
  [1648789200000, 525000],
];

const rawAverageWage = [
  [1960, 4007],
  [1961, 4086],
  [1962, 4291],
  [1963, 4396],
  [1964, 4576],
  [1965, 4658],
  [1966, 4938],
  [1967, 5213],
  [1968, 5571],
  [1969, 5893],
  [1970, 6186],
  [1971, 6497],
  [1972, 7133],
  [1973, 7580],
  [1974, 8030],
  [1975, 8630],
  [1976, 9226],
  [1977, 9779],
  [1978, 10556],
  [1979, 11479],
  [1980, 12513],
  [1981, 13773],
  [1982, 14531],
  [1983, 15239],
  [1984, 16135],
  [1985, 16822],
  [1986, 17321],
  [1987, 18426],
  [1988, 19334],
  [1989, 20099],
  [1990, 21027],
  [1991, 21811],
  [1992, 22935],
  [1993, 23132],
  [1994, 23753],
  [1995, 24705],
  [1996, 25913],
  [1997, 27426],
  [1998, 28861],
  [1999, 30469],
  [2000, 32154],
  [2001, 32921],
  [2002, 33252],
  [2003, 34064],
  [2004, 35648],
  [2005, 36952],
  [2006, 38651],
  [2007, 40405],
  [2008, 41334],
  [2009, 40711],
  [2010, 41673],
  [2011, 42979],
  [2012, 44321],
  [2013, 44888],
  [2014, 46481],
  [2015, 48098],
  [2016, 48642],
  [2017, 50321],
  [2018, 52145],
  [2019, 54099],
  [2020, 55628],
];

const data1 = [
  [1, 100],
  [2, 200],
  [3, 400],
];
const data2 = [
  { date: "day 1", value: 100 },
  { date: "day 2", value: 200 },
  { date: "day 3", value: 900 },
];

let curatedHousingPricing = [];

var buildCHP = (x) => {
  for (const stamp of x) {
    curatedHousingPricing.push({ date: `${timeConverter(stamp[0])}`, value: stamp[1] });
    console.log(stamp);
  }
  console.log(curatedHousingPricing);

  const ctx = document.getElementById("myChart").getContext("2d");
  var myChart = new Chart(ctx, {
    type: "line",
    data: {
      datasets: [
        {
          label: "Pricing",
          data: curatedHousingPricing,
          backgroundColor: [
            "rgba(255, 99, 132, 0.2)",
            "rgba(54, 162, 235, 0.2)",
            "rgba(255, 206, 86, 0.2)",
            "rgba(75, 192, 192, 0.2)",
            "rgba(153, 102, 255, 0.2)",
            "rgba(255, 159, 64, 0.2)",
          ],
          borderColor: [
            "rgba(255, 99, 132, 1)",
            "rgba(54, 162, 235, 1)",
            "rgba(255, 206, 86, 1)",
            "rgba(75, 192, 192, 1)",
            "rgba(153, 102, 255, 1)",
            "rgba(255, 159, 64, 1)",
          ],
          borderWidth: 1,
        },
        {
          label: "Pricing",
          data: data2,
          backgroundColor: [
            "rgba(255, 99, 132, 0.2)",
            "rgba(54, 162, 235, 0.2)",
            "rgba(255, 206, 86, 0.2)",
            "rgba(75, 192, 192, 0.2)",
            "rgba(153, 102, 255, 0.2)",
            "rgba(255, 159, 64, 0.2)",
          ],
          borderColor: [
            "rgba(255, 99, 132, 1)",
            "rgba(54, 162, 235, 1)",
            "rgba(255, 206, 86, 1)",
            "rgba(75, 192, 192, 1)",
            "rgba(153, 102, 255, 1)",
            "rgba(255, 159, 64, 1)",
          ],
          borderWidth: 1,
        },
      ],
    },
    options: {
      parsing: {
        xAxisKey: "date",
        yAxisKey: "value",
      },
      scales: {
        y: {
          beginAtZero: false,
        },
      },
    },
  });
};

buildCHP(rawAverageHousePrice);

function timeConverter(UNIX_timestamp) {
  // var a = new Date(UNIX_timestamp * 1000);
  var a = new Date(UNIX_timestamp);
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  var year = a.getFullYear();
  var month = months[a.getMonth()];
  var date = a.getDate();
  var hour = a.getHours();
  var min = a.getMinutes();
  var sec = a.getSeconds();
  var time = date + " " + month + " " + year + " " + hour + ":" + min + ":" + sec;
  return time;
}
function toTimestamp(strDate) {
  var datum = Date.parse(strDate);
  return datum;
}
console.log(toTimestamp(2022));
console.log(timeConverter(1640995200000));

// console.log(formattedTime);
